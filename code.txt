package uk.ac.ucl.servlets;

import Notes.Item;
import Notes.ItemList;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;

@WebServlet("/getnotes.html")
public class getSubNote extends HttpServlet {
    private Stack<listOfItems> notes = new Stack();
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        ArrayList<Item> list = new ArrayList<>();
        Boolean done = false;
        while (!done) {
            if (notes.isEmpty()) {
                // If nothing in stack, we just entered so display the note lists.
                done = true;
                ObjectMapper Obj = new ObjectMapper(); // Used to map json entries to objects.
                int line = 0;
                try (MappingIterator<listOfItems> it = Obj.readerFor(listOfItems.class).readValues(new File("./items.json"))) {
                    // Each line of json is a LIST OF NOTES!
                    while (it.hasNextValue()) {
                        line++;
                        listOfItems v;
                        try {
                            v = it.nextValue();
                            System.out.println(v.getContents());
                            // FINDS LIST OF NOTES IN JSON CORRESPONDING TO THE PRESSED BUTTON
                            if (v.getContents().contains(request.getParameter(("content")).toString())) {
                                System.out.println(request.getParameter(("content")).toString());
                                notes.push(v); // Adds this to stack, so when visiting a list inside a list we know where tf to search.
                                break; //Once we have found the needed list, we can exit the loop
                            }
                        } catch (JsonMappingException e) {
                            System.err.println("Problem on line " + line + ": " + e.getMessage());
                        }
                    }
                }
                //If each listofitems in the json did not match the required one, it must have already been inserted
                if(!notes.isEmpty() && notes.peek().getContents().contains(request.getParameter(("content")).toString())){
                    for (Item x : notes.peek().getItems()) { // Got to check if it matches request.getParameter(("content") first. Only
                        // then can u add it to the stack and add its contents to the arraylist as this is a listofitems.
                        list.add(x);
                    }
                }
            } else {
                for (Item maybeList : notes.peek().getItems()) { // Got to check if it matches request.getParameter(("content") first. Only
                    // then can u add it to the stack and add it's contents to the arraylist as this is a listofitems.
                    if (maybeList.getContents().contains(request.getParameter(("content")))) {
                        notes.push((listOfItems) maybeList);
                        for (Item y : notes.peek().getItems()) {
                            list.add(y);
                        }
                        done = true;
                        break;
                    }
                }
            }
            notes.pop();
        }
        request.setAttribute("list", list);
        ServletContext context = getServletContext();
        RequestDispatcher dispatch = context.getRequestDispatcher("/dummypage.jsp");
        dispatch.forward(request, response);
        response.setContentType("text/html");
    }
}



Dummy getnotes code
public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
    ObjectMapper Obj = new ObjectMapper(); // Used to map json entries to objects.
    int line = 0;
    try (MappingIterator<listOfItems> it = Obj.readerFor(listOfItems.class).readValues(new File("./items.json"))) {
        // Each line of json is a LIST OF NOTES!
        while (it.hasNextValue()) {
            line++;
            listOfItems v;
            try {
                v = it.nextValue();
                if (v.getContents().contains(request.getParameter(("content")))) { // Check if button's value matches with json line
                    request.setAttribute("list", v.getItems());
                    ServletContext context = getServletContext();
                    RequestDispatcher dispatch = context.getRequestDispatcher("/dummypage.jsp");
                    dispatch.forward(request, response);
                    response.setContentType("text/html");
                    return; //Once we have found the needed list, we can exit the loop
                }
            } catch (JsonMappingException e) {
                System.err.println("Problem on line " + line + ": " + e.getMessage());
            }
        }
    }
}

try {
          ObjectMapper mapper = new ObjectMapper();
          String oldJson = mapper.writeValueAsString(note);

          String newJson = mapper.writeValueAsString(note);
          BufferedReader reader = new BufferedReader(new FileReader("items.json"));
          String json = "";
          String line = reader.readLine();
          while(line != null){
            json += line + System.lineSeparator();
            line = reader.readLine();
          }
          FileWriter writer = new FileWriter("items.json");
          writer.write(json);
        } catch (JsonProcessingException e) {
          throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
          throw new RuntimeException(e);
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
        return;
      }